# Deploy WordPress
name: WordPress Deployment

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ main ]

jobs:
  # ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á dev
  test:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å Repository
    - uses: actions/checkout@v3
    
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    - name: Set up environment
      run: |
        cp .env.example .env
        
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ Deploy WordPress ‡∏î‡πâ‡∏ß‡∏¢ Docker Compose ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    - name: Deploy WordPress with Docker Compose for testing
      run: |
        docker-compose down
        docker-compose up -d wordpress-test db phpmyadmin
        
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
    - name: Health check
      run: |
        echo "Waiting for WordPress to start..."
        # Increase wait time to 60 seconds
        sleep 60
        
        # Implement retry logic with correct port and header inspection
        MAX_RETRIES=5
        RETRY_COUNT=0
        
        until curl -i http://wp-test:80/wp-login.php | grep -E "(WordPress|302 Found)" || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
          echo "WordPress not ready yet, retrying... ($(($RETRY_COUNT+1))/$MAX_RETRIES)"
          RETRY_COUNT=$((RETRY_COUNT+1))
          sleep 15
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "WordPress health check failed after $MAX_RETRIES attempts"
          curl -i http://wp-test:80 > response.html
          echo "Response content:"
          cat response.html
          exit 1
        else
          echo "WordPress is up and running!"
        fi
      shell: /bin/bash -e {0}
    
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö WordPress ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    - name: Basic WordPress Tests
      run: |
        echo "üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö WordPress ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô"
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ login
        echo "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ login..."
        curl -i http://wp-test:80/wp-login.php | grep -q -E "(WordPress|302 Found)" && echo "‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ login ‡πÑ‡∏î‡πâ" || echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ login ‡πÑ‡∏î‡πâ"
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á REST API
        echo "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á REST API..."
        curl -i http://wp-test:80/wp-json/ | grep -q "routes" && echo "‚úÖ REST API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥" || echo "‚ùå REST API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á WordPress
        echo "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á WordPress..."
        VERSION=$(curl -s http://wp-test:80 | grep -o "content=\"WordPress [0-9.]*\"" | grep -o "[0-9.]*" || echo "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∏‡πà‡∏ô")
        echo "üìä WordPress ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: $VERSION"
        
        echo "üèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"

  # ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Deploy ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Pull Request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á main
  deploy:
    runs-on: self-hosted
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å Repository
    - uses: actions/checkout@v3
    
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    - name: Set up environment
      run: |
        cp .env.example .env
        
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ Deploy WordPress ‡∏î‡πâ‡∏ß‡∏¢ Docker Compose ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Production
    - name: Deploy WordPress with Docker Compose
      run: |
        docker-compose down
        docker-compose up -d wordpress-prod db phpmyadmin

